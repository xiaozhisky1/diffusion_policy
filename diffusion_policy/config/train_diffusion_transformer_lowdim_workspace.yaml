defaults:
  - _self_  # 默认使用当前配置文件的自身设置
  - task: blockpush_lowdim_seed  # 设置任务为 "blockpush_lowdim_seed"（一个低维的推箱任务）

name: train_diffusion_transformer_lowdim  # 设置训练任务的名称
_target_: diffusion_policy.workspace.train_diffusion_transformer_lowdim_workspace.TrainDiffusionTransformerLowdimWorkspace  # 目标类，指定训练任务所使用的工作空间类

# 任务相关的配置参数
obs_dim: ${task.obs_dim}  # 观察空间的维度，直接引用任务的观察空间维度
action_dim: ${task.action_dim}  # 动作空间的维度，直接引用任务的动作空间维度
task_name: ${task.name}  # 任务名称，引用任务的名称
exp_name: "default"  # 实验名称，默认为 "default"

# 训练过程中的一些参数设置
horizon: 5  # 任务的时间步长，表示每次回合的最大时间步数
n_obs_steps: 3  # 每次观察的步骤数（在训练中每个样本包含的观察时间步）
n_action_steps: 1  # 每个动作的步骤数，通常是1表示每个动作在一个时间步中完成
n_latency_steps: 0  # 延迟步骤数，通常用于模拟控制系统中的延迟
past_action_visible: False  # 是否将过去的动作暴露给模型，False 表示不暴露
keypoint_visible_rate: 1.0  # 关键点可见率，1.0表示所有关键点都可见
obs_as_cond: True  # 是否将观察作为条件输入，如果为True，表示将观测信息作为输入条件提供给模型
pred_action_steps_only: False  # 是否仅预测动作步骤（如果为True，只考虑动作预测）

# 策略模型的配置
policy:
  _target_: diffusion_policy.policy.diffusion_transformer_lowdim_policy.DiffusionTransformerLowdimPolicy  # 策略的目标类，使用 DiffusionTransformerLowdimPolicy 作为策略模型

  model:
    _target_: diffusion_policy.model.diffusion.transformer_for_diffusion.TransformerForDiffusion  # 模型使用的目标类，选择 TransformerForDiffusion 作为基础模型
    input_dim: ${eval:'${action_dim} if ${obs_as_cond} else ${obs_dim} + ${action_dim}'}  # 输入维度：如果观察作为条件输入，则仅为动作维度；否则是观察维度加动作维度
    output_dim: ${policy.model.input_dim}  # 输出维度与输入维度相同
    horizon: ${horizon}  # 使用的时间步长（回合长度）
    n_obs_steps: ${n_obs_steps}  # 每个样本包含的观察时间步数

    cond_dim: ${eval:'${obs_dim} if ${obs_as_cond} else 0'}  # 如果观察作为条件输入，则条件维度为观察空间的维度，否则为0

    n_layer: 8  # Transformer 模型的层数，设置为 8 层
    n_head: 4  # 每层 Transformer 的头数，表示自注意力机制中头的数量
    n_emb: 256  # 嵌入层的维度，通常表示模型的词嵌入或特征维度
    p_drop_emb: 0.0  # 嵌入层的 dropout 概率，这里设置为0表示没有丢弃
    p_drop_attn: 0.3  # 自注意力层的 dropout 概率，0.3表示在注意力层丢弃30%的神经元，防止过拟合

    causal_attn: True  # 是否使用因果注意力机制，True表示使用因果卷积，通常用于生成模型中，以确保未来的输入不影响当前的输出
    time_as_cond: True  # 是否将时间作为条件输入，如果为True，表示将时间步信息作为额外的输入提供给模型
    obs_as_cond: ${obs_as_cond}  # 观察是否作为条件输入，取决于上面定义的 obs_as_cond 配置
    n_cond_layers: 0  # 条件部分的 Transformer 层数，若为 0 则不使用 Transformer 编码器作为条件部分

  # 噪声调度器的配置（用于扩散模型的训练）
  noise_scheduler:
    _target_: diffusers.schedulers.scheduling_ddpm.DDPMScheduler  # 选择 DDPMScheduler 作为噪声调度器
    num_train_timesteps: 100  # 训练的时间步数，表示训练过程中噪声的添加过程
    beta_start: 0.0001  # 噪声调度器中 beta 的起始值，控制噪声的增加速率
    beta_end: 0.02  # 噪声调度器中 beta 的结束值，控制噪声的增加速率
    beta_schedule: squaredcos_cap_v2  # 使用的噪声调度方式，这里选择了 squaredcos_cap_v2
    variance_type: fixed_small  # 噪声调度的方差类型，'fixed_small' 指使用固定的小方差
    clip_sample: True  # 是否在生成时对样本进行裁剪，通常当 predict_epsilon=False 时需要开启
    prediction_type: epsilon  # 预测的类型为epsilon，通常用于DDPM（去噪扩散概率模型），也可以选择 'sample' 进行采样


  # 一些训练配置的基础参数
  horizon: ${horizon}  # 任务的最大时间步长（即一个任务回合的长度），通常用于表示任务的总时间步数。
  obs_dim: ${obs_dim}  # 观察空间的维度，即输入给模型的观察数据的特征维度。
  action_dim: ${action_dim}  # 动作空间的维度，表示模型输出的动作的维度。
  n_action_steps: ${n_action_steps}  # 每个动作的步数，通常为1，表示每个动作在一个时间步内完成。
  n_obs_steps: ${n_obs_steps}  # 观察步数，每个样本有多少个时间步的观察数据。
  num_inference_steps: 100  # 推理时的时间步数，在生成过程中的总步骤数，通常用于扩散模型。
  obs_as_cond: ${obs_as_cond}  # 是否将观察数据作为条件输入。如果为True，模型在生成时会用到观察数据。
  pred_action_steps_only: ${pred_action_steps_only}  # 是否仅预测动作步骤。如果为True，表示模型只关注动作的预测。

# EMA模型（指数滑动平均模型）的配置
ema:
  _target_: diffusion_policy.model.diffusion.ema_model.EMAModel  # 指定使用的EMA模型类
  update_after_step: 0  # 在每次更新之后是否立即更新EMA模型，0表示每一步更新。
  inv_gamma: 1.0  # EMA模型的反gamma参数，控制EMA的更新速率，值越大EMA更新越慢。
  power: 0.75  # EMA模型的power指数，通常用于调整模型的更新频率。
  min_value: 0.0  # EMA模型的最小值限制，设置为0.0表示没有最小限制。
  max_value: 0.9999  # EMA模型的最大值限制，设置为0.9999表示最大值接近1。

# 数据加载器配置
dataloader:
  batch_size: 256  # 每批次的数据量，指定每次训练时加载的样本数量。
  num_workers: 1  # 数据加载的并行工作线程数。通常设置为CPU核心数的一个适当值。
  shuffle: True  # 是否在每个训练轮次中打乱数据集，以增强模型的泛化能力。
  pin_memory: True  # 是否将数据加载到CUDA内存中，提高数据加载的速度。
  persistent_workers: False  # 是否使用持久化工作线程，通常用于多轮数据加载。

val_dataloader:
  batch_size: 256  # 验证集的批次大小。
  num_workers: 1  # 验证集数据加载的并行线程数。
  shuffle: False  # 验证时不需要打乱数据，通常我们希望验证集数据顺序固定。
  pin_memory: True  # 验证时使用CUDA内存。
  persistent_workers: False  # 验证时使用非持久化工作线程。

# 优化器配置
optimizer:
  learning_rate: 1.0e-4  # 初始学习率，控制模型权重更新的幅度。
  weight_decay: 1.0e-3  # 权重衰减，防止模型过拟合，通常是L2正则化项。
  betas: [0.9, 0.95]  # Adam优化器中的betas参数，分别表示一阶和二阶矩估计的衰减率。

# 训练过程中的一些配置
training:
  device: "cuda:0"  # 训练使用的设备，"cuda:0"表示使用第一个GPU，如果没有GPU则改为"cpu"。
  seed: 42  # 随机种子，用于控制实验的可重复性。
  debug: False  # 是否启用调试模式，调试模式下可以提供更多的日志信息帮助排查问题。
  resume: True  # 是否从上次中断的训练继续训练。
  lr_scheduler: cosine  # 学习率调度器，使用余弦退火学习率调度（cosine annealing）。
  lr_warmup_steps: 1000  # 学习率预热步骤数，在开始时逐步增加学习率，避免训练初期梯度过大。
  num_epochs: 5000  # 总训练轮数，表示模型的训练总次数。
  gradient_accumulate_every: 1  # 梯度累积步数，1表示每个批次都更新一次梯度，适用于大批量训练。
  use_ema: True  # 是否使用EMA（指数滑动平均）模型进行训练，帮助模型更平滑的收敛。

  # 控制训练过程的循环
  rollout_every: 50  # 每50轮执行一次rollout（采样过程）。
  checkpoint_every: 50  # 每50轮保存一次检查点（模型参数）。
  val_every: 1  # 每1轮进行一次验证。
  sample_every: 5  # 每5轮生成一次样本。

  # 每轮训练的最大步数（可以根据任务要求设置）
  max_train_steps: null  # 最大训练步数（为null表示没有限制）。
  max_val_steps: null  # 最大验证步数（为null表示没有限制）。

  # 与训练进度条相关的配置
  tqdm_interval_sec: 1.0  # 进度条更新的最小时间间隔，单位是秒。

# 日志配置
logging:
  project: diffusion_policy_debug  # 日志记录的项目名称，用于区分不同的训练任务。
  resume: True  # 是否恢复之前的训练日志。
  mode: online  # 日志记录模式，online表示实时记录。
  name: ${now:%Y.%m.%d-%H.%M.%S}_${name}_${task_name}  # 日志文件的名称，包含时间戳、实验名称和任务名称。
  tags: ["${name}", "${task_name}", "${exp_name}"]  # 日志的标签，用于标识该实验。
  id: null  # 日志ID，通常自动生成。
  group: null  # 日志分组，若设置为null表示不分组。

# 检查点保存配置
checkpoint:
  topk:
    monitor_key: test_mean_score  # 用于选择最佳模型的评估指标，选择测试集平均得分作为评估标准。
    mode: max  # 评估指标是选择最大值（max）还是最小值（min）。
    k: 5  # 保留前5个最佳模型。
    format_str: 'epoch={epoch:04d}-test_mean_score={test_mean_score:.3f}.ckpt'  # 检查点文件命名格式，包含轮次和测试得分。

  save_last_ckpt: True  # 是否保存最后一个检查点。
  save_last_snapshot: False  # 是否保存最后一个快照（快照是整个模型的存档）。

# 多次运行配置（支持Hyperparameter Sweep）
multi_run:
  run_dir: data/outputs/${now:%Y.%m.%d}/${now:%H.%M.%S}_${name}_${task_name}  # 每次运行的保存目录，带有时间戳和任务名。
  wandb_name_base: ${now:%Y.%m.%d-%H.%M.%S}_${name}_${task_name}  # 用于WandB（Weights and Biases）的实验名称。

# Hydra配置（用于多任务管理和实验组织）
hydra:
  job:
    override_dirname: ${name}  # Hydra作业输出目录的前缀，使用当前实验名称。

  run:
    dir: data/outputs/${now:%Y.%m.%d}/${now:%H.%M.%S}_${name}_${task_name}  # Hydra运行结果保存目录，带有时间戳和任务名。

  sweep:
    dir: data/outputs/${now:%Y.%m.%d}/${now:%H.%M.%S}_${name}_${task_name}  # Hydra Sweep（超参数搜索）结果保存目录。
    subdir: ${hydra.job.num}  # 超参数搜索时的子目录，用于区分不同的搜索实验。

